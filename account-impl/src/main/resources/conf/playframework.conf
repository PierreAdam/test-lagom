play {
  akka {
    actor-system = "account"
  }

  ## Modules
  # https://www.playframework.com/documentation/latest/Modules
  # ~~~~~
  # Control which modules are loaded when Play starts.  Note that modules are
  # the replacement for "GlobalSettings", which are deprecated in 2.5.x.
  # Please see https://www.playframework.com/documentation/latest/GlobalSettings
  # for more information.
  modules {
    enabled += com.payintech.account.impl.AccountModule
  }

  ## Evolutions
  # https://www.playframework.com/documentation/latest/Evolutions
  # ~~~~~
  # Evolutions allows database scripts to be automatically run on startup in dev mode
  # for database migrations. You must enable this by adding to build.sbt:
  #
  # libraryDependencies += evolutions
  #
  evolutions {

    # You can disable evolutions for a specific datasource if necessary
    db.default.enabled = true
    db.default.enabled = ${?PLAY_EVOLUTIONS_DB_DEFAULT_ENABLED}

    # Whether a locks table should be used. This must be used if you have many Play
    # nodes that may potentially run evolutions, but you want to ensure that only one
    # does. It will create a table called play_evolutions_lock, and use a
    # SELECT FOR UPDATE NOWAIT or SELECT FOR UPDATE to lock it. This will only work
    # for Postgres, Oracle, and MySQL InnoDB. It will not work for other databases
    db.default.useLocks = true
    db.default.useLocks = ${?PLAY_EVOLUTIONS_DB_DEFAULT_USELOCK}

    # Whether evolutions should be automatically applied. In dev mode, this will cause
    # both ups and downs evolutions to be automatically applied. In prod mode, it will
    # cause only ups evolutions to be automatically applied
    db.default.autoApply = true
    db.default.autoApply = ${?PLAY_EVOLUTIONS_DB_DEFAULT_AUTOAPPLY}

    # Auto apply down instructions when evolution applied
    db.default.autoApplyDowns = false
    db.default.autoApplyDowns = ${?PLAY_EVOLUTIONS_DB_DEFAULT_AUTOAPPLYDOWNS}
  }
}